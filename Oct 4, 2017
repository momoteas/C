1 类型定义：
    。自定义数据类型：
        。C语言提供了一个叫做typedef的功能来声明一个已有的数据类型的新名字。比如：typedef int length，使得length成为int的别名；
        。例如：    typedef struct{
                      int month;
                      int day;
                      int year
                   }date;
2 联合：
    。关键字 union，例如： union AnElt{
                            int i;
                            char c;
                        }elt1, elt2;
    。存储：
        。所有的成员共享一个空间；
        。同一时间只有一个成员是有效的；
        。union大大小是其最大的成员；
    。初始化：
        。对第一成员做初始化；
3 全局变量：
    。全局变量具有全局的生存期和作用域；与任何函数无关；在任何函数内部都可以使用它们；
    。没有做初始化的全局变量会得到0值，指针会得到NULL值；只能在编译时刻已知的值来初始化全局变量；它的初始化发生在main函数之前；
    。如果函数内部存在与全局变量同名的变量，则全局变量被隐藏（覆盖）；
4 静态本地变量：
    。关键字 static
    。当函数离开的时候，静态本地变量会继续存在并保持其值；
    。静态本地变量的初始化只会在第一次进入这个函数时做，以后进入函数时会保持上次离开时的值；
    。静态本地变量实际上是特殊的全局变量；它们位于相同的内存区域；静态本地变量具有全局的生存期，函数内的局部作用域；static在这里的意思是局部作用域；
5 全局变量贴士：
    。返回指针的函数：
        。返回本地变量的地址是危险的；返回全局变量或静态本地变量的地址是安全的；
        。返回在函数内malloc的内存是安全的，但是容易造成问题；
        。最好的做法是返回传入的指针；
    。不要使用全局变量来在函数间传递参数和结果；
6 宏：
    。编译预处理指令：
        。#开头的是编译预处理指令；
        。它们不是C语言的成分，但是C语言程序离不开它们；
        。#define用来定义一个宏；
    。#define:
        。#define<名字> <值>
        。注意没有结尾的分号，因为不是C语句
        。名字必须是一个单词，值可以是各种东西；
        。在C语言的编译器开始编译之前，编译预处理程序（cpp）会把程序中的名字换成值，完全的文本替换；
        。gcc --save-temps;
        。没有值的宏：
            。#define _DEBUG
            。这类宏用于条件编译，后面有其他的编译预处理指令来检查这个宏是否已经被定义过了；
        。预定义的宏：__LINE__, __FILE__, __DATE__, __TIME__, __STDC__;    
    。带参数的宏：
        。#define cube(x)((x)*(x)*(x))
        。宏可以带参数
        。带参数的宏的原则：
            。一切都要括号；
            。整个值要括号；
            。参数出现的每个地方都要括号；
        。运算符：#和##，可以自行学习；
        。缺点：宏没有类型检查
        。部分宏会被inline函数取代；
7 大程序：
    。多个.c文件：一个源代码文件太长了适合分成几个文件；
    



























