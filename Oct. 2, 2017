1.1 数据类型：
        1）内存中的表示：float以编码方式表示，而int以二进制表示；
        2）sizeof: 查看类型所占字节（byte）数；
        3）二进制负数：
                1> 补码：
        4）数的范围： 
        
1.2 整数的输入输出：
        1）%d: int; %u: unsigned; %ld: long long; %lu: unsigned long long; 
        2) 8进制和16进制：
                1> 输入：以0开头：8进制；以0x开头：16进制；
                2> 输出：%o, %x;
                
1.3 选择数据类型：
        1）与硬件类型相关：
        
1.4 浮点类型： 
        1）float: 32位，范围，有效数字：7， scanf: %f, printf: %f, %e;
        2）double: 64位，范围，有效数字：15，scanf: %lf, printf: %f, %e;
        3) 输出精度：%.2f;
        4）inf: 表示超出范围的浮点数，例如：1.0/0.0；nan：表示不存在的浮点数，例如：0.0/0.00;
        5）带小数点的字面量是double, 而非float, float需要用f或F后缀来标明身份；
        6）浮点数的内部表达：以编码形式表达；1bit:符号位，11bit:指数部分， 52bit:fraction部分；
        7）选择浮点类型：如果无特殊要求，只使用double;
        
1.5 字符类型：
        1）单引号表示字符字面量: 'c', '1';
        2）输出：%c；
        3）占1byte;
        4）逃逸字符："\";
                \b: 回退一格，123\bA ---> 12A;
                \t: 制表位；
                \n: 换行；
                \r: 回车；
        
1.6 类型自动转换：
        1）任何小于int的类型，都会被自动转换为int类型；
        2）对于scanf: short类型：%hd, long类型：%ld;
        3）强制类型转换：（类型），例如：（int）10.2，优先级高于四则运算；
        
1.7 bool类型：
        1）头文件：#include<stdbool.h>;
        
1.8 逻辑运算：
        1）结果只有0或1；
        2）运算符：！（非）， &&（与）， ||（或），例如：x>4 && x<6;
        3）优先级：！> && > ||，比赋值运算高，比关系运算低；
        4）短路：
        
1.9 条件运算符：
        1）条件 ？ 表达式1：表达式2
        2）逗号运算符“，”：优先级低于赋值运算符，例如：i=3+4, 5+6, i=7;但是i=(3+4, 5+6), i=11;
        
2.0 函数：
        1）初见函数：
        2）函数的定义和调用：
                1> 返回类型，函数名，参数表，函数体；
                2> 调用：函数名（参数值）；
        3）从函数返回：return，停止一个函数的执行，并且可以返回一个值；理念：单一出口；
                    void: 不带return;
        4）函数原型声明：定义在头部，预先告知系统。例如：int sum(int x, int y);            
        5）参数传递：
                1> 参数调用的类型同样适用于自动类型转换；
                2> C语言在调用函数时，永远只能传递值给函数；
                3> 每个函数有自己的变量空间，参数也位于这个独立的空间中，和其他函数没有关系；
                4）本地变量：函数的每次运行，就产生了一个独立的变量空间，在这个空间中的变量，是函数的这次运行所独有的，称为本地变量；
                         ：定义在函数内部的变量就是本地变量；
                         ：参数也是本地变量；
                         ：生存期和作用域：大括号内；
                         ：本地变量的规则：本地变量是定义在块内的，即大括号内；
                                      ：大括号的含义：可以是函数的块内；
                                                 ：也可以是语句的块内；
                                                 ：甚至可以随便拉一对大括号来定义变量；
                                      ：程序进入这个块之前，其中的变量不存在，离开这个块，其中的变量就消失了；
                                      ：在块外面定义的变量，在块内有效；
                                      ：块外和块内的变量同名，块内的变量掩盖块外的变量值；
                                      ：本地变量不会被默认初始化；
                                      ：参数在进入函数的时候被初始化了；

3.0 数组：
        1）初试数组：
                1> 声明：<类型> 变量名[元素数量];
                2> 从C99开始，可用使用变量定义数组的大小；
                3> 数组是一种容器，特点是：
                                      其中所有的元素具有相同的数据类型；
                                      一旦创建，不能改变大小；
                                      数组中的元素在内存中是连续依次排列的；
        2）数组的使用：
                1> 使用数组时在[]中的数字叫做下标或索引，下标从0开始计数；
                2> 编译器和运行环境都不会检查数组下标是否越界，无论是对数组单元做读还是写；
                3> 一旦程序运行，约界的数组访问可能造成问题，导致程序崩溃；
                4> 数组同变量一样，需要主动初始化；
        3）数组运算：
                1> 数组的集成初始化：int num[]={1,2,3,4,5,6}; 或 int num[10]={0}; 或 int a[10]={[1]=2,4,[5]=6};
                2> 数组的大小：sizeof给出整个数组所占据的内容的大小，单位是字节（byte）； sizeof(a)/sizeof(a[0]);
                3> 数组的赋值：要把一个数组的所有元素交给另一个数组，必须采用遍历；
                4> 数组作为函数参数时，往往必须再用另一个参数来传入数组的大小；
        4）二维数组：
                1> 定义：int a[3][5]，3行5列的矩阵；
                2> 初始化：行数可以省略，列数必须给出；
        5）取地址运算：
                1> 运算符：&，获得变量的地址，它的操作数必须是变量；输出类型：%p
                2> 地址的大小是否与int相同取决于编译器和系统架构（32bit or 64bit);
                3> 堆栈stack:自顶向下分配地址；
        6）指针：
                1> 指针，就是保存地址的变量；
                2> 区别：普通变量的值是实际的值，指针变量的值是具有实际值的变量的地址；
                3> 作为参数的指针：void f(int *p);
                              ：在被调用的时候得到了某个变量的地址；
                              ：在函数里面可以通过这个指针访问外面的这个变量i；
                4> 访问那个地址上的变量*：
                        ：*是一个单目运算符，用来访问指针的值所表示的地址上的变量；
                        ：可以做右值也可以做左值；
                        ：int k = *p（作为一个整体，看作一个整数）;
                        ：*p = k+1;
                5> 指针的运算符&*：
                        ：二者相互作用：
                                > *&yptr -> *(&yptr) -> *(yptr的地址）-> 得到那个地址上的变量 -> yptr
                                > &*yptr -> &(*yptr) -> &(y) -> 得到y的地址，也就是yptr -> yptr;
                                
                
                
                
                
                
                
                
                
                
        
        
        
        
